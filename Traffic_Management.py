# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DEwgmdgBvHAG8Nkr_lXnmqd4C3GK0vNR
"""

!nvidia-smi

import os
HOME = os.getcwd()
print(HOME)

# Pip install method (recommended)

!pip install ultralytics==8.0.134

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model=yolov8n.pt conf=0.25 source='https://media.roboflow.com/notebooks/examples/dog.jpeg' save=True

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename='runs/detect/predict/dog.jpeg', height=600)

model = YOLO(f'{HOME}/yolov8n.pt')
results = model.predict(source='https://media.roboflow.com/notebooks/examples/dog.jpeg', conf=0.25)

results[0].boxes.xyxy

results[0].boxes.conf

results[0].boxes.cls

# Commented out IPython magic to ensure Python compatibility.
!mkdir {HOME}/datasets
# %cd {HOME}/datasets

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="ZKIo71G4iFvL5B8beehx")
project = rf.workspace("dataset-a9s39").project("ann1")
dataset = project.version(1).download("yolov8")

print(HOME)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolov8s.pt data=/content/datasets/ann1-1/data.yaml epochs=5 imgsz=800 plots=True

!ls {HOME}/runs/detect/train/

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/confusion_matrix.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/results.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/val_batch0_pred.jpg', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=val model={HOME}/runs/detect/train/weights/best.pt data={dataset.location}/data.yaml

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
!yolo task=detect mode=predict model={HOME}/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True

import gdown
import os

drive_link = 'https://drive.google.com/file/d/11OLxbqLn3uMNLNaPTUnhy7TdvNzY3jCn/view?usp=sharing'
file_id = drive_link.split('/d/')[1].split('/')[0]
output_file = 'video.mp4'  # The name you want to save the video as

gdown.download(f'https://drive.google.com/uc?id={file_id}', output_file, quiet=False)

# Verify the download
os.listdir()

!yolo task=detect mode=predict model={HOME}/runs/detect/train/weights/best.pt conf=0.25 source= /content/video.mp4

!pip install opencv-python
import cv2

!pip install moviepy

from moviepy.editor import VideoFileClip

# Input and output file paths
input_file_path = "/content/runs/detect/predict4/video.avi"
output_file_path = "video1.mp4"

# Load the video clip
clip = VideoFileClip(input_file_path)

# Write the video clip to a new file in MP4 format
clip.write_videofile(output_file_path, codec='libx264', audio_codec='aac')

# Close the clip to free up resources
clip.close()

from base64 import b64encode

from IPython.display import HTML
from base64 import b64encode

# Output file path
output_file_path = "video1.mp4"

# Display the video in the notebook
video_encoded = b64encode(open(output_file_path, "rb").read()).decode("ascii")
HTML(f"""
<video width="640" height="360" controls>
  <source src="data:video/mp4;base64,{video_encoded}" type="video/mp4">
  Your browser does not support the video tag.
</video>
""")





import cv2
from IPython.display import Image, display

# Video path
video_path = '/content/video.mp4'

# Open the video file
cap = cv2.VideoCapture(video_path)

# Read the first frame
ret, frame = cap.read()

# Display the first frame
while ret:
    # Display the frame
    display(Image(data=cv2.imencode('.jpg', frame)[1].tobytes(), width=600))

    # Read the next frame
    ret, frame = cap.read()

# Release the video capture object
cap.release()

import cv2
import numpy as np

# Video path
video_path = '/content/video.mp4'

# Open the video file
cap = cv2.VideoCapture(video_path)

# Get video properties
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

# Define the codec and create a VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Adjust codec as needed
output_path = '/content/output_video.mp4'
out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

# Read and write frames
ret, frame = cap.read()
while ret:
    # Write the frame to the output video
    out.write(frame)

    # Read the next frame
    ret, frame = cap.read()

# Release the video capture and writer objects
cap.release()
out.release()

# Display the output video
from IPython.display import Video, display
display(Video(output_path, width=600))



from IPython.display import Video, display

# Video path
video_path = '/content/runs/detect/predict6/video.avi'

# Display the video
display(Video(video_path, width=600))

from IPython.display import HTML

video_path = '/content/runs/detect/predict6/video.avi'

# Embed video with autoplay and loop
HTML(f'<video width="600" controls autoplay loop><source src="{video_path}" type="video/mp4"></video>')

# Replace 'video.avi' with the actual filename of your AVI video
video_path = '/content/runs/detect/predict6/video.avi'

# Open the video file
cap = cv2.VideoCapture(video_path)

from IPython.display import display, Image

# Read and display the video frames
while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Display the frame in the notebook
    display(Image(data=cv2.imencode('.jpg', frame)[1].tostring(), format='jpeg'))

project.version(dataset.version).deploy(model_type="yolov8", model_path=f"{HOME}/runs/detect/train2/")

import requests

url = "https://api.roboflow.com/dataset-a9s39/ann1/1/uploadModel"
params = {
    "api_key": "ZKIo71G4iFvL5B8beehx",
    "modelType": "yolov8",
    "nocache": "true"
}

response = requests.post(url, params=params, data={"key": "value"})

if response.status_code == 404:
    print("Error 404: Not Found")
    print(response.content)  # Print the response content for more details
else:
    print("Unexpected error:", response.status_code)
    print(response.content)

from IPython.display import HTML

video_path = '/content/runs/detect/predict6/video.avi'  # Replace with the actual path to your MP4 video file

video_html = f"""
<video width="640" height="360" controls>
  <source src="{video_path}" type="video/mp4">
  Your browser does not support the video tag.
</video>
"""

HTML(video_html)

#Run inference on your model on a persistant, auto-scaling, cloud API

#load model
model = project.version(dataset.version).model

#choose random test set image
import os, random
test_set_loc = '/content/datasets/ann1-1/test/images'
random_test_image = random.choice(os.listdir(test_set_loc))
print("running inference on " + random_test_image)

pred = model.predict(test_set_loc + random_test_image, confidence=40, overlap=30).json()
pred

